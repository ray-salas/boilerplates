version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app_pass
      POSTGRES_DB: isp_data
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    depends_on:
      - postgres
    environment:
      NC_DB: "pg://app:app_pass@postgres:5432/isp_data"
    ports:
      - "8080:8080"
    networks:
      - backend

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: isp_data
      DB_POSTGRESDB_USER: app
      DB_POSTGRESDB_PASSWORD: app_pass
      N8N_BASIC_AUTH_ACTIVE: 'false'
      N8N_HOST: n8n.local
      WEBHOOK_TUNNEL_URL: http://localhost:5678
    depends_on:
      - postgres
    networks:
      - backend

  ollama:
    image: ollama/ollama
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - backend

  flowise:
    image: flowiseai/flowise
    container_name: flowise
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      FLOWISE_USERNAME: admin
      FLOWISE_PASSWORD: admin
    volumes:
      - flowise_data:/root/.flowise
    depends_on:
      - ollama
    networks:
      - backend

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - backend

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - backend

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup
    restart: unless-stopped
    networks:
      - backend

  duplicati:
    image: lscr.io/linuxserver/duplicati
    container_name: duplicati
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - duplicati_config:/config
      - pgdata:/source/postgres
      - flowise_data:/source/flowise
    ports:
      - "8200:8200"
    networks:
      - backend

volumes:
  pgdata:
  ollama_data:
  flowise_data:
  qdrant_data:
  minio_data:
  duplicati_config:

networks:
  backend:
    name: backend
